/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo } from 'react'
import { useGLTF } from '@react-three/drei'

import { Physics, usePlane, useBox, useSphere, useContactMaterial, useCompoundBody, Debug } from '@react-three/cannon'
import { Geometry } from "three-stdlib";

const groundMaterial = 'ground'
const boxMaterial = 'box'
const sphereMaterial = 'sphere'
const popcornMaterial = 'popcorn'

function toConvexProps(bufferGeometry) {
  const geo = new Geometry().fromBufferGeometry(bufferGeometry);
  // Merge duplicate vertices resulting from glTF export.
  // Cannon assumes contiguous, closed meshes to work
  geo.mergeVertices();
  return [geo.vertices.map((v) => [v.x, v.y, v.z]), geo.faces.map((f) => [f.a, f.b, f.c]), []]; // prettier-ignore
}

export function PopcornSmoothModel(props) {
  const { nodes, materials } = useGLTF('/popcorn-smooth-draco.glb')
  const xPos = (Math.random() - 0.5) * 3
  const yPos = 5
  const zPos = (Math.random() - 0.5) * 3

  // const [ref, api] = useConvexPolyhedron(() => ({
  //   args: [0.4],
  //   position: [xPos, yPos, zPos],
  //   material: popcornMaterial,
  //   mass: 1,
  //   ...props
  // }))

  // const [ref, api] = useBox(() => ({
  //   args: [1, 1, 1],
  //   position: [xPos, yPos, zPos],
  //   material: popcornMaterial,
  //   mass: 1,
  //   ...props
  // }))

  const [ref, api] = useBox(() => ({
    args: [2*props.scale, 2.5*props.scale, 2*props.scale],
    position: [xPos, yPos, zPos],
    material: boxMaterial,
    mass: 1,
    ...props
  }))

  useContactMaterial(popcornMaterial, groundMaterial, {
    friction: 0.8,
    restitution: 0.3,
  })

  useEffect(() => {
    const randX = (Math.random() - 0.5) * 4
    const randY = Math.random() * 5 + 8
    const randZ = (Math.random() - 0.5) * 4
    api.applyImpulse([randX, randY, randZ], [0.05,0.1,0])
  }, [])

  return (
    <group ref={ref} {...props} dispose={null}>
      <group position={[2.8, -1, 0.01]}>
        <mesh geometry={nodes.Icosphere003.geometry} material={materials.Butter} />
        <mesh geometry={nodes.Icosphere003_1.geometry} material={materials.ButterLess} />
        <mesh geometry={nodes.Icosphere003_2.geometry} material={materials.Seed} />
      </group>
    </group>
  )
}

useGLTF.preload('/popcorn-smooth-draco.glb')
